// Copyright 2020-2022 Manta Network.
// This file is part of Manta.

// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
<<<<<<< HEAD
//! DATE: 2022-01-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
=======
//! DATE: 2021-12-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
>>>>>>> manta
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("manta-local"), DB CACHE: 128

// Executed Command:
// manta
// benchmark
// --chain=manta-local
// --pallet=pallet_multisig
// --extrinsic=*
// --execution=Wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --repeat=20
// --steps=50
// --template=.github/resources/frame-weight-template.hbs
// --output=pallet_multisig.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_multisig.
pub trait WeightInfo {
	fn as_multi_threshold_1(z: u32, ) -> Weight;
	fn as_multi_create(s: u32, z: u32, ) -> Weight;
	fn as_multi_create_store(s: u32, z: u32, ) -> Weight;
	fn as_multi_approve(s: u32, z: u32, ) -> Weight;
	fn as_multi_approve_store(s: u32, z: u32, ) -> Weight;
	fn as_multi_complete(s: u32, z: u32, ) -> Weight;
	fn approve_as_multi_create(s: u32, ) -> Weight;
	fn approve_as_multi_approve(s: u32, ) -> Weight;
	fn approve_as_multi_complete(s: u32, ) -> Weight;
	fn cancel_as_multi(s: u32, ) -> Weight;
}

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for SubstrateWeight<T> {
	fn as_multi_threshold_1(z: u32, ) -> Weight {
<<<<<<< HEAD
		(26_029_000 as Weight)
=======
		(33_812_000 as Weight)
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(z as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(66_688_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((204_000 as Weight).saturating_mul(s as Weight))
=======
		(66_365_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((268_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn as_multi_create_store(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(71_385_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((226_000 as Weight).saturating_mul(s as Weight))
=======
		(72_482_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((276_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(42_203_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((176_000 as Weight).saturating_mul(s as Weight))
=======
		(39_938_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((256_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	fn as_multi_approve_store(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(69_622_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((212_000 as Weight).saturating_mul(s as Weight))
=======
		(71_678_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((256_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(84_011_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((409_000 as Weight).saturating_mul(s as Weight))
=======
		(88_303_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((445_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn approve_as_multi_create(s: u32, ) -> Weight {
<<<<<<< HEAD
		(61_835_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((237_000 as Weight).saturating_mul(s as Weight))
=======
		(63_384_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((277_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:0)
	fn approve_as_multi_approve(s: u32, ) -> Weight {
<<<<<<< HEAD
		(36_157_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((226_000 as Weight).saturating_mul(s as Weight))
=======
		(38_046_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((265_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn approve_as_multi_complete(s: u32, ) -> Weight {
<<<<<<< HEAD
		(113_375_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((419_000 as Weight).saturating_mul(s as Weight))
=======
		(119_558_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((462_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	fn cancel_as_multi(s: u32, ) -> Weight {
<<<<<<< HEAD
		(94_377_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((240_000 as Weight).saturating_mul(s as Weight))
=======
		(98_377_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((280_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn as_multi_threshold_1(z: u32, ) -> Weight {
<<<<<<< HEAD
		(26_029_000 as Weight)
=======
		(33_812_000 as Weight)
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(z as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(66_688_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((204_000 as Weight).saturating_mul(s as Weight))
=======
		(66_365_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((268_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn as_multi_create_store(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(71_385_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((226_000 as Weight).saturating_mul(s as Weight))
=======
		(72_482_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((276_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(42_203_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((176_000 as Weight).saturating_mul(s as Weight))
=======
		(39_938_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((256_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	fn as_multi_approve_store(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(69_622_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((212_000 as Weight).saturating_mul(s as Weight))
=======
		(71_678_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((256_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
<<<<<<< HEAD
		(84_011_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((409_000 as Weight).saturating_mul(s as Weight))
=======
		(88_303_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((445_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			// Standard Error: 0
			.saturating_add((3_000 as Weight).saturating_mul(z as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn approve_as_multi_create(s: u32, ) -> Weight {
<<<<<<< HEAD
		(61_835_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((237_000 as Weight).saturating_mul(s as Weight))
=======
		(63_384_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((277_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:0)
	fn approve_as_multi_approve(s: u32, ) -> Weight {
<<<<<<< HEAD
		(36_157_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((226_000 as Weight).saturating_mul(s as Weight))
=======
		(38_046_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((265_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn approve_as_multi_complete(s: u32, ) -> Weight {
<<<<<<< HEAD
		(113_375_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((419_000 as Weight).saturating_mul(s as Weight))
=======
		(119_558_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((462_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Storage: Multisig Calls (r:1 w:1)
	fn cancel_as_multi(s: u32, ) -> Weight {
<<<<<<< HEAD
		(94_377_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((240_000 as Weight).saturating_mul(s as Weight))
=======
		(98_377_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((280_000 as Weight).saturating_mul(s as Weight))
>>>>>>> manta
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
