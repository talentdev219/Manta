---
name: publish draft releases

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

env:
  CARGO_TERM_COLOR: always

jobs:

  get-rust-versions:
    runs-on: ubuntu-latest
    container:
      image: paritytech/ci-linux:production
    outputs:
      rustc-stable: ${{ steps.get-rust-versions.outputs.stable }}
      rustc-nightly: ${{ steps.get-rust-versions.outputs.nightly }}
    steps:
      -
        id: get-rust-versions
        run: |
          echo "::set-output name=stable::$(rustc +stable --version)"
          echo "::set-output name=nightly::$(rustc +nightly --version)"

  build-runtime:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime:
          - calamari
          - manta-pc
    steps:
      -
        uses: actions/checkout@v2
      -
        name: cache target dir
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/runtime/${{ matrix.runtime }}/target"
          key: srtool-target-${{ matrix.runtime }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ matrix.runtime }}-
            srtool-target-
      -
        name: build ${{ matrix.runtime }} runtime
        id: srtool-build
        uses: chevdor/srtool-actions@v0.3.0
        with:
          image: paritytech/srtool
          chain: ${{ matrix.runtime }}
      -
        name: persist srtool digest
        env:
          matrix_runtime: ${{ matrix.runtime }}
        run: >
          echo '${{ steps.srtool-build.outputs.json }}' |
          sed "s/${matrix_runtime//-/_}/${matrix_runtime}/g" |
          jq > ${{ matrix.runtime }}-srtool-output.json
      -
        name: upload ${{ matrix.runtime }} srtool json
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-srtool-json
          path: ${{ matrix.runtime }}-srtool-output.json
      -
        name: upload ${{ matrix.runtime }} runtime
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-runtime
          path: |
            ${{ steps.srtool-build.outputs.wasm }}
            ${{ steps.srtool-build.outputs.wasm_compressed }}

  build-changelog:
    runs-on: ubuntu-latest
    needs:
      - get-rust-versions
      - build-runtime
    steps:
      -
        uses: actions/download-artifact@v2
        with:
          name: manta-pc-srtool-json
      -
        uses: actions/download-artifact@v2
        with:
          name: calamari-srtool-json
      -
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: Manta
      -
        name: ruby setup
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      -
        name: changelog gems
        run: |
          gem install changelogerator git toml
      -
        name: generate changelog
        env:
          RUSTC_STABLE: ${{ needs.get-rust-versions.outputs.rustc-stable }}
          RUSTC_NIGHTLY: ${{ needs.get-rust-versions.outputs.rustc-nightly }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ruby $GITHUB_WORKSPACE/Manta/scripts/github/generate-changelog.rb ||
          cat $GITHUB_WORKSPACE/Manta/scripts/github/fallback-changelog.md |
          tee changelog.md
      -
        name: upload changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: changelog.md

  create-draft-release:
    runs-on: ubuntu-latest
    needs:
      - build-changelog
      - build-runtime
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      -
        uses: actions/download-artifact@v2
        with:
          name: changelog
          path: ./
      -
        name: create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: runtime ${{ github.ref }}
          body_path: changelog.md
          draft: true

  publish-runtime:
    runs-on: ubuntu-latest
    needs:
      - create-draft-release
    strategy:
      matrix:
        runtime:
          - calamari
          - manta-pc
    steps:
      -
        uses: actions/checkout@v2
      -
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.runtime }}-runtime
      -
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.runtime }}-srtool-json
      -
        name: ruby setup
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      -
        name: list artifacts
        run: |
          ls
      -
        if: contains(matrix.runtime, '-')
        name: rename underscored artifacts
        env:
          matrix_runtime: ${{ matrix.runtime }}
        # yamllint disable rule:line-length
        run: |
          mv \
            ${matrix_runtime//-/_}_runtime.compact.compressed.wasm \
            ${{ matrix.runtime }}_runtime.compact.compressed.wasm
          mv \
            ${matrix_runtime//-/_}_runtime.compact.wasm \
            ${{ matrix.runtime }}_runtime.compact.wasm
          ls
        # yamllint enable rule:line-length
      -
        name: get runtime version
        id: get-runtime-version
        run: |
          runtime_ver="$(ruby -e '
            require "./scripts/github/lib.rb";
            puts get_runtime("${{ matrix.runtime }}")
          ')"
          echo "::set-output name=runtime_ver::$runtime_ver"
      -
        name: upload compact ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # yamllint disable rule:line-length
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: ${{ matrix.runtime }}_runtime.compact.wasm
          asset_name: ${{ matrix.runtime }}-runtime-v${{ steps.get-runtime-version.outputs.runtime_ver }}.compact.wasm
          asset_content_type: application/wasm
          # yamllint enable rule:line-length
      -
        name: upload compressed ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # yamllint disable rule:line-length
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: ${{ matrix.runtime }}_runtime.compact.compressed.wasm
          asset_name: ${{ matrix.runtime }}-runtime-v${{ steps.get-runtime-version.outputs.runtime_ver }}.compact.compressed.wasm
          asset_content_type: application/wasm
          # yamllint enable rule:line-length
      -
        name: upload ${{ matrix.runtime }} types json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # yamllint disable rule:line-length
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: types.json
          asset_name: ${{ matrix.runtime }}-types-v${{ steps.get-runtime-version.outputs.runtime_ver }}.json
          asset_content_type: application/json
          # yamllint enable rule:line-length
      -
        name: upload ${{ matrix.runtime }} srtool output json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # yamllint disable rule:line-length
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: ${{ matrix.runtime }}-srtool-output.json
          asset_name: ${{ matrix.runtime }}-srtool-output-v${{ steps.get-runtime-version.outputs.runtime_ver }}.json
          asset_content_type: application/json
          # yamllint enable rule:line-length

  brag:
    runs-on: ubuntu-latest
    needs: create-draft-release
    steps:
      -
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_USERNAME: raybot
          DISCORD_AVATAR: https://gist.githubusercontent.com/grenade/66a46007b37778d81ee064394263b16c/raw/raybot.webp
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: 'draft runtime release created for ${{ github.ref }}'
---
name: publish draft releases

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

env:
  CARGO_TERM_COLOR: always

jobs:

  get-rust-versions:
    runs-on: ubuntu-latest
    container:
      image: paritytech/ci-linux:production
    outputs:
      rustc-stable: ${{ steps.get-rust-versions.outputs.stable }}
      rustc-nightly: ${{ steps.get-rust-versions.outputs.nightly }}
    steps:
      -
        id: get-rust-versions
        run: |
          echo "::set-output name=stable::$(rustc +stable --version)"
          echo "::set-output name=nightly::$(rustc +nightly --version)"

  build-runtime:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime:
          - calamari
          - manta-pc
    steps:
      -
        uses: actions/checkout@v2
      -
        name: cache target dir
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/runtime/${{ matrix.runtime }}/target"
          key: srtool-target-${{ matrix.runtime }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ matrix.runtime }}-
            srtool-target-
      -
        name: build ${{ matrix.runtime }} runtime
        id: srtool-build
        uses: chevdor/srtool-actions@v0.3.0
        with:
          image: paritytech/srtool
          chain: ${{ matrix.runtime }}
      -
        name: persist srtool digest
        env:
          matrix_runtime: ${{ matrix.runtime }}
        run: >
          echo '${{ steps.srtool-build.outputs.json }}' |
          sed "s/${matrix_runtime//-/_}/${matrix_runtime}/g" |
          jq > ${{ matrix.runtime }}-srtool-output.json
      -
        name: upload ${{ matrix.runtime }} srtool json
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-srtool-json
          path: ${{ matrix.runtime }}-srtool-output.json
      -
        name: upload ${{ matrix.runtime }} runtime
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.runtime }}-runtime
          path: |
            ${{ steps.srtool-build.outputs.wasm }}
            ${{ steps.srtool-build.outputs.wasm_compressed }}

  build-changelog:
    runs-on: ubuntu-latest
    needs:
      - get-rust-versions
      - build-runtime
    steps:
      -
        uses: actions/download-artifact@v2
        with:
          name: manta-pc-srtool-json
      -
        uses: actions/download-artifact@v2
        with:
          name: calamari-srtool-json
      -
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: Manta
      -
        name: ruby setup
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      -
        name: changelog gems
        run: |
          gem install changelogerator git toml
      -
        name: generate changelog
        env:
          RUSTC_STABLE: ${{ needs.get-rust-versions.outputs.rustc-stable }}
          RUSTC_NIGHTLY: ${{ needs.get-rust-versions.outputs.rustc-nightly }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ruby $GITHUB_WORKSPACE/Manta/scripts/github/generate-changelog.rb |
          tee changelog.md
      -
        name: upload changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: changelog.md

  create-draft-release:
    runs-on: ubuntu-latest
    needs:
      - build-changelog
      - build-runtime
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      -
        uses: actions/download-artifact@v2
        with:
          name: changelog
          path: ./
      -
        name: create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: runtime ${{ github.ref }}
          body_path: changelog.md
          draft: true

  publish-runtime:
    runs-on: ubuntu-latest
    needs:
      - create-draft-release
    strategy:
      matrix:
        runtime:
          - calamari
          - manta-pc
    steps:
      -
        uses: actions/checkout@v2
      -
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.runtime }}-runtime
      -
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.runtime }}-srtool-json
      -
        name: ruby setup
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      -
        name: list artifacts
        run: |
          ls
      -
        if: contains(matrix.runtime, '-')
        name: rename underscored artifacts
        env:
          matrix_runtime: ${{ matrix.runtime }}
        # yamllint disable rule:line-length
        run: |
          mv \
            ${matrix_runtime//-/_}_runtime.compact.compressed.wasm \
            ${{ matrix.runtime }}_runtime.compact.compressed.wasm
          mv \
            ${matrix_runtime//-/_}_runtime.compact.wasm \
            ${{ matrix.runtime }}_runtime.compact.wasm
          ls
        # yamllint enable rule:line-length
      -
        name: get runtime version
        id: get-runtime-version
        run: |
          runtime_ver="$(ruby -e '
            require "./scripts/github/lib.rb";
            puts get_runtime("${{ matrix.runtime }}")
          ')"
          echo "::set-output name=runtime_ver::$runtime_ver"
      -
        name: upload compact ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # yamllint disable rule:line-length
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: ${{ matrix.runtime }}_runtime.compact.wasm
          asset_name: ${{ matrix.runtime }}-runtime-v${{ steps.get-runtime-version.outputs.runtime_ver }}.compact.wasm
          asset_content_type: application/wasm
          # yamllint enable rule:line-length
      -
        name: upload compressed ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # yamllint disable rule:line-length
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: ${{ matrix.runtime }}_runtime.compact.compressed.wasm
          asset_name: ${{ matrix.runtime }}-runtime-v${{ steps.get-runtime-version.outputs.runtime_ver }}.compact.compressed.wasm
          asset_content_type: application/wasm
          # yamllint enable rule:line-length
      -
        name: upload ${{ matrix.runtime }} types json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # yamllint disable rule:line-length
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: types.json
          asset_name: ${{ matrix.runtime }}-types-v${{ steps.get-runtime-version.outputs.runtime_ver }}.json
          asset_content_type: application/json
          # yamllint enable rule:line-length
      -
        name: upload ${{ matrix.runtime }} srtool output json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # yamllint disable rule:line-length
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: ${{ matrix.runtime }}-srtool-output.json
          asset_name: ${{ matrix.runtime }}-srtool-output-v${{ steps.get-runtime-version.outputs.runtime_ver }}.json
          asset_content_type: application/json
          # yamllint enable rule:line-length
