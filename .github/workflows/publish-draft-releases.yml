---

# yamllint disable rule:line-length

name: publish draft releases

on:
  push:
    branch:
      - manta-pc
    #tags:
    #  - v[0-9]+.[0-9]+.[0-9]+*

jobs:

  get-rust-versions:
    runs-on: ubuntu-latest
    container:
      image: paritytech/ci-linux:production
    outputs:
      rustc-stable: ${{ steps.get-rust-versions.outputs.stable }}
      rustc-nightly: ${{ steps.get-rust-versions.outputs.nightly }}
    env:
      CARGO_TERM_COLOR: always
    steps:
      -
        id: get-rust-versions
        run: |
          echo "::set-output name=stable::$(rustc +stable --version)"
          echo "::set-output name=nightly::$(rustc +nightly --version)"

  # test-docker-works:
  #  needs: start-calamari-runtime-builder
  #  runs-on: needs.start-calamari-runtime-builder.outputs.runner-label

  build-calamari-runtime:
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      -
        uses: actions/checkout@v2
      -
        name: cache target dir
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/runtime/calamari/target"
          key: srtool-target-calamari-${{ github.sha }}
          restore-keys: |
            srtool-target-calamari-
            srtool-target-
      -
        name: build runtime
        id: srtool-build
        uses: chevdor/srtool-actions@v0.3.0
        with:
          image: paritytech/srtool
          chain: calamari
      -
        name: persist srtool digest
        run: >
          echo '${{ steps.srtool-build.outputs.json }}' |
          jq > calamari-srtool-output.json
      -
        name: upload srtool json
        uses: actions/upload-artifact@v2
        with:
          name: calamari-srtool-json
          path: calamari-srtool-output.json
      -
        name: upload runtime
        uses: actions/upload-artifact@v2
        with:
          name: calamari-runtime
          path: |
            ${{ steps.srtool-build.outputs.wasm }}
            ${{ steps.srtool-build.outputs.wasm_compressed }}

  build-node:
    needs: start-node-builder
    runs-on: ${{ needs.start-node-builder.outputs.runner-label }}
    env:
      CARGO_TERM_COLOR: always
    steps:
      -
        uses: actions/checkout@v2
      -
        name: install sccache

        env:
          SCCACHE_RELEASE_URL: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: v0.2.15
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$SCCACHE_RELEASE_URL/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          chmod +x $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      -
        name: cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-
      -
        name: cache sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: /home/runner/.cache/sccache
          key: sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-
      -
        name: start sccache server
        run: sccache --start-server
      -
        name: init
        run: |
          curl -s https://sh.rustup.rs -sSf | sh -s -- -y
          source ${HOME}/.cargo/env
          rustup toolchain install stable
          rustup toolchain install nightly
          rustup default stable
          rustup target add wasm32-unknown-unknown --toolchain nightly
          cargo +nightly install --git https://github.com/alexcrichton/wasm-gc --force
          rustup update
      -
        name: build
        env:
          RUST_BACKTRACE: full
          RUSTC_WRAPPER: sccache
          SCCACHE_CACHE_SIZE: 2G
          SCCACHE_DIR: /home/runner/.cache/sccache
        run: |
          source ${HOME}/.cargo/env
          cargo build --verbose --release --features calamari
      -
        name: stop sccache server
        run: sccache --stop-server || true
      -
        name: strip
        run: |
          strip target/release/calamari-pc
      -
        name: upload
        uses: actions/upload-artifact@v2
        with:
          name: calamari-pc
          path: target/release/calamari-pc

  integration-test:
    needs:
      - build-node
      - build-calamari-runtime
      - start-integration-tester
    runs-on: ${{ needs.start-integration-tester.outputs.runner-label }}
    timeout-minutes: 90
    steps:
      -
        name: fetch calamari-pc
        uses: actions/download-artifact@v2
        with:
          name: calamari-pc
      -
        name: mv and chmod calamari-pc
        run: |
          mkdir -p $HOME/.local/bin
          mv ${{ github.workspace }}/calamari-pc $HOME/.local/bin/
          chmod +x $HOME/.local/bin/calamari-pc
          ls -ahl ${{ github.workspace }}/
          ls -ahl $HOME/.local/bin/
      -
        name: fetch and chmod polkadot
        run: |
          curl -L -o $HOME/.local/bin/polkadot https://github.com/paritytech/polkadot/releases/download/v0.9.8/polkadot
          chmod +x $HOME/.local/bin/polkadot
          ls -ahl $HOME/.local/bin/
      -
        name: create chainspec
        run: |
          mkdir -p $HOME/.local/share/calamari-pc
          $HOME/.local/bin/calamari-pc export-state --chain calamari-testnet > $HOME/.local/share/calamari-pc/calamari-testnet-state.json || true
          jq \
            --sort-keys \
            --arg name "calamari testnet ${GITHUB_SHA:0:7}" \
            --arg id calamari-testnet-${GITHUB_SHA:0:7} \
            --arg relay_chain rococo-local-${GITHUB_SHA:0:7} \
            --arg parachain_id 2084 \
            '. |
              .name = $name |
              .id = $id |
              .relay_chain = $relay_chain |
              .para_id = ($parachain_id | tonumber) |
              .telemetryEndpoints = [["/dns/api.telemetry.manta.systems/tcp/443/x-parity-wss/%2Fsubmit%2F", 0]]
            ' $HOME/.local/share/calamari-pc/calamari-testnet-state.json > $HOME/.local/share/calamari-pc/calamari-testnet-${GITHUB_SHA:0:7}.json
          ls -ahl $HOME/.local/share/calamari-pc/
      -
        name: create launch config
        run: |
          mkdir -p $HOME/.local/share/calamari-pc
          echo '{
            "relaychain": {
              "chain": "rococo-local",
              "mutation": {},
              "nodes": [
                {
                  "name": "alice",
                  "wsPort": 9911,
                  "port": 31331,
                  "flags": [
                    "--rpc-cors=all",
                    "--telemetry-url=wss://api.telemetry.manta.systems/submit 0"
                  ]
                },
                {
                  "name": "bob",
                  "wsPort": 9912,
                  "port": 31332,
                  "flags": [
                    "--rpc-cors=all",
                    "--telemetry-url=wss://api.telemetry.manta.systems/submit 0"
                  ]
                }
              ],
              "genesis": {
                "runtime": {
                  "runtime_genesis_config": {
                    "parachainsConfiguration": {
                      "config": {
                        "validation_upgrade_frequency": 1,
                        "validation_upgrade_delay": 1
                      }
                    }
                  }
                }
              }
            },
            "parachains": [
              {
                "id": "2084",
                "nodes": [
                  {
                    "name": "alice",
                    "wsPort": 9921,
                    "port": 32331,
                    "flags": [
                      "--rpc-cors=all",
                      "--",
                      "--execution=wasm"
                    ]
                  },
                  {
                    "name": "bob",
                    "wsPort": 9922,
                    "port": 32332,
                    "flags": [
                      "--rpc-cors=all",
                      "--",
                      "--execution=wasm"
                    ]
                  }
                ]
              }
            ],
            "hrmpChannels": [],
            "types": {},
            "finalization": false
          }' | \
          jq \
            --arg relaychain_bin $HOME/.local/bin/polkadot \
            --arg relaychain_id rococo-local-${GITHUB_SHA:0:7} \
            --arg relaychain_name "rococo local ${GITHUB_SHA:0:7}" \
            --arg parachains_bin $HOME/.local/bin/calamari-pc \
            --arg parachains_spec $HOME/.local/share/calamari-pc/calamari-testnet-${GITHUB_SHA:0:7}.json \
            '.
              | .relaychain.bin = $relaychain_bin
              | .relaychain.mutation.id = $relaychain_id
              | .relaychain.mutation.name = $relaychain_name
              | .parachains[].bin = $parachains_bin
              | .parachains[].chain = $parachains_spec
            ' > $HOME/.local/share/calamari-pc/calamari-testnet-${GITHUB_SHA:0:7}-launch-config.json
          jq . $HOME/.local/share/calamari-pc/calamari-testnet-${GITHUB_SHA:0:7}-launch-config.json
          ls -ahl $HOME/.local/share/calamari-pc/
      -
        uses: actions/checkout@v2
        with:
          repository: Manta-Network/manta-pc-launch
          path: manta-pc-launch
      -
        name: launch testnet
        run: |
          tree ${{ github.workspace }}
          cd ${{ github.workspace }}/manta-pc-launch
          yarn
          yarn build
          pm2 start dist/cli.js -- $HOME/.local/share/calamari-pc/calamari-testnet-${GITHUB_SHA:0:7}-launch-config.json

  build-changelog:
    runs-on: ubuntu-latest
    needs:
      - get-rust-versions
      - build-calamari-runtime
    steps:
      #-
      #  uses: actions/download-artifact@v2
      #  with:
      #    name: manta-pc-srtool-json
      -
        uses: actions/download-artifact@v2
        with:
          name: calamari-srtool-json
      -
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: Manta
      -
        name: ruby setup
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      -
        name: changelog gems
        run: |
          gem install changelogerator git toml
      -
        name: generate changelog
        env:
          RUSTC_STABLE: ${{ needs.get-rust-versions.outputs.rustc-stable }}
          RUSTC_NIGHTLY: ${{ needs.get-rust-versions.outputs.rustc-nightly }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ruby $GITHUB_WORKSPACE/Manta/scripts/github/generate-changelog.rb |
          tee changelog.md
      -
        name: upload changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: changelog.md

  create-draft-release:
    runs-on: ubuntu-latest
    needs:
      - build-changelog
      - build-calamari-runtime
      - integration-test
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      -
        uses: actions/download-artifact@v2
        with:
          name: changelog
          path: ./
      -
        name: create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: manta ${{ github.ref }}
          body_path: changelog.md
          draft: true

  publish-calamari-runtime:
    runs-on: ubuntu-latest
    needs:
      - create-draft-release
    steps:
      -
        uses: actions/checkout@v2
      -
        uses: actions/download-artifact@v2
        with:
          name: calamari-runtime
      -
        uses: actions/download-artifact@v2
        with:
          name: calamari-srtool-json
      -
        name: ruby setup
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      -
        name: get runtime version
        id: get-runtime-version
        run: |
          runtime_ver="$(ruby -e '
            require "./scripts/github/lib.rb";
            puts get_runtime("calamari")
          ')"
          echo "::set-output name=runtime_ver::$runtime_ver"
      -
        name: upload compact wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: calamari_runtime.compact.wasm
          asset_name: calamari-runtime-v${{ steps.get-runtime-version.outputs.runtime_ver }}.compact.wasm
          asset_content_type: application/wasm
      -
        name: upload compressed wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: calamari_runtime.compact.compressed.wasm
          asset_name: calamari-runtime-v${{ steps.get-runtime-version.outputs.runtime_ver }}.compact.compressed.wasm
          asset_content_type: application/wasm
      -
        name: upload types json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: types.json
          asset_name: calamari-types-v${{ steps.get-runtime-version.outputs.runtime_ver }}.json
          asset_content_type: application/json
      -
        name: upload srtool output json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: calamari-srtool-output.json
          asset_name: calamari-srtool-output-v${{ steps.get-runtime-version.outputs.runtime_ver }}.json
          asset_content_type: application/json

  publish-node:
    runs-on: ubuntu-latest
    needs:
      - build-node
      - create-draft-release
    outputs:
      download_url: ${{ steps.upload-calamari-pc.outputs.browser_download_url }}
    steps:
      -
        uses: actions/download-artifact@v2
        with:
          name: calamari-pc
      -
        id: upload-calamari-pc
        name: upload calamari-pc
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.asset_upload_url }}
          asset_path: calamari-pc
          asset_name: calamari-pc
          asset_content_type: application/octet-stream

  brag:
    runs-on: ubuntu-latest
    needs: create-draft-release
    steps:
      -
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_USERNAME: raybot
          DISCORD_AVATAR: https://gist.githubusercontent.com/grenade/66a46007b37778d81ee064394263b16c/raw/raybot.png
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: 'draft runtime release ${{ github.ref }} created at ${{ needs.create-draft-release.outputs.release_url }}'

  start-node-builder:
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.start-self-hosted-runner.outputs.runner-label }}
      aws-region: ${{ steps.start-self-hosted-runner.outputs.aws-region }}
      aws-instance-id: ${{ steps.start-self-hosted-runner.outputs.aws-instance-id }}
    steps:
      -
        id: start-self-hosted-runner
        uses: audacious-network/aws-github-runner@v1.0.33
        with:
          mode: start
          github-token: ${{ secrets.GH_SHR_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-instance-ssh-public-key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPb24HEQ++aNFWaqVyMtIs6GotUB8R+q61XOoI2z6uMj
          aws-region: us-east-1
          aws-subnet-id: subnet-08c26caf0a52b7c19
          aws-security-group-id: sg-0315bffea9042ac9b
          aws-instance-type: c5a.8xlarge # 32 vcpu, 64gb ram, $1.392 hourly
          aws-instance-root-volume-size: 32
          aws-instance-lifecycle: spot
          aws-image-search-pattern: ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*
          aws-image-search-owners: '["099720109477"]' # canonical

  stop-node-builder:
    needs:
      - start-node-builder
      - build-node
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      -
        uses: audacious-network/aws-github-runner@v1.0.33
        with:
          mode: stop
          github-token: ${{ secrets.GH_SHR_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.start-node-builder.outputs.aws-region }}
          runner-label: ${{ needs.start-node-builder.outputs.runner-label }}
          aws-instance-id: ${{ needs.start-node-builder.outputs.aws-instance-id }}

  # start-calamari-runtime-builder:
  #  runs-on: ubuntu-latest
  #  outputs:
  #    runner-label: ${{ steps.start-self-hosted-runner.outputs.runner-label }}
  #    aws-region: ${{ steps.start-self-hosted-runner.outputs.aws-region }}
  #    aws-instance-id: ${{ steps.start-self-hosted-runner.outputs.aws-instance-id }}
  #  steps:
  #    -
  #      id: start-self-hosted-runner
  #      uses: audacious-network/aws-github-runner@v1.0.33
  #      with:
  #        mode: start
  #        github-token: ${{ secrets.GH_SHR_TOKEN }}
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-instance-ssh-public-key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPb24HEQ++aNFWaqVyMtIs6GotUB8R+q61XOoI2z6uMj
  #        aws-region: us-east-1
  #        aws-subnet-id: subnet-08c26caf0a52b7c19
  #        aws-security-group-id: sg-0315bffea9042ac9b
  #        aws-instance-type: c5a.2xlarge # 8 vcpu, 16gb ram, $0.348 hourly
  #        aws-instance-root-volume-size: 16
  #        aws-instance-lifecycle: spot
  #        aws-image-search-pattern: ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*
  #        aws-image-search-owners: '["099720109477"]' # canonical

  # stop-calamari-runtime-builder:
  #  needs:
  #    # - build-calamari-runtime
  #    - test-docker-works
  #    - start-calamari-runtime-builder
  #  runs-on: ubuntu-latest
  #  if: ${{ always() }}
  #  steps:
  #    -
  #      uses: audacious-network/aws-github-runner@v1.0.33
  #      with:
  #        mode: stop
  #        github-token: ${{ secrets.GH_SHR_TOKEN }}
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: ${{ needs.start-calamari-runtime-builder.outputs.aws-region }}
  #        runner-label: ${{ needs.start-calamari-runtime-builder.outputs.runner-label }}
  #        aws-instance-id: ${{ needs.start-calamari-runtime-builder.outputs.aws-instance-id }}

  start-integration-tester:
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.start-self-hosted-runner.outputs.runner-label }}
      aws-region: ${{ steps.start-self-hosted-runner.outputs.aws-region }}
      aws-instance-id: ${{ steps.start-self-hosted-runner.outputs.aws-instance-id }}
    steps:
      -
        id: start-self-hosted-runner
        uses: audacious-network/aws-github-runner@v1.0.33
        with:
          mode: start
          github-token: ${{ secrets.GH_SHR_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-instance-ssh-public-key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPb24HEQ++aNFWaqVyMtIs6GotUB8R+q61XOoI2z6uMj
          aws-region: us-east-1
          aws-subnet-id: subnet-08c26caf0a52b7c19
          aws-security-group-id: sg-0315bffea9042ac9b
          aws-instance-type: c5a.8xlarge # 32 vcpu, 64gb ram, $1.392 hourly
          aws-instance-root-volume-size: 64
          aws-instance-lifecycle: spot
          aws-image-search-pattern: ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*
          aws-image-search-owners: '["099720109477"]' # canonical

  stop-integration-tester:
    needs:
      - start-integration-tester
      - integration-test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      -
        uses: audacious-network/aws-github-runner@v1.0.33
        with:
          mode: stop
          github-token: ${{ secrets.GH_SHR_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.start-integration-tester.outputs.aws-region }}
          runner-label: ${{ needs.start-integration-tester.outputs.runner-label }}
          aws-instance-id: ${{ needs.start-integration-tester.outputs.aws-instance-id }}

# yamllint enable rule:line-length
